BEGIN;

-- https://wiki.debian.org/DebianRepository/Format

-- BEGIN REPOSITORY TABLES.

CREATE TABLE debian_repository_index_release (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  -- Metadata fields for the Release index. These are the values used to
  -- actually generate this file that's hosted in production.
  origin TEXT NOT NULL,
  label TEXT NOT NULL,
  suite TEXT NOT NULL,
  codename TEXT NOT NULL,
  description TEXT NOT NULL,

  -- The contents of the `Release` file.
  contents TEXT,
  pgp_signature_hash_type TEXT,
  pgp_signature TEXT,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE debian_repository (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  -- Uniquely identifying fields for the repository.
  uri TEXT NOT NULL,
  distribution TEXT NOT NULL,
  UNIQUE(uri, distribution),

  -- Metadata fields for the top-level Release file. These are the _current_
  -- (i.e. _staging_) values, not necessarily the ones in production.
  origin TEXT NOT NULL,
  label TEXT NOT NULL,
  suite TEXT NOT NULL,
  codename TEXT NOT NULL,
  description TEXT NOT NULL,

  -- The index of the active release, if one exists. If NULL, this means no
  -- active release has yet been published for this repository.
  active_release_index BIGINT REFERENCES debian_repository_index_release(id),

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE debian_repository_architecture (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  repository_id BIGINT NOT NULL REFERENCES debian_repository(id),

  name TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE debian_repository_component (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  repository_id BIGINT NOT NULL REFERENCES debian_repository(id),

  name TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- END REPOSITORY TABLES.

-- BEGIN INDEX TABLES.
--
-- These tables represent the various index files. Their checksums are cached
-- here to generate the Release file.

CREATE TYPE debian_repository_index_compression AS ENUM ('none', 'xz', 'gz', 'bz2', 'lzma');

CREATE TABLE debian_repository_index_packages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  repository_id BIGINT NOT NULL REFERENCES debian_repository(id),

  -- Packages indexes' file paths are uniquely identified by (component, arch).
  component_id BIGINT NOT NULL REFERENCES debian_repository_component(id),
  architecture_id BIGINT NOT NULL REFERENCES debian_repository_architecture(id),

  format debian_repository_index_compression NOT NULL,
  size BIGINT NOT NULL,
  contents BYTEA NOT NULL,

  md5sum TEXT NOT NULL,
  sha1sum TEXT NOT NULL,
  sha256sum TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE debian_repository_index_contents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  repository_id BIGINT NOT NULL REFERENCES debian_repository(id),

  -- Contents indexes' file paths are uniquely identified by component.
  component_id BIGINT NOT NULL REFERENCES debian_repository_component(id),

  format debian_repository_index_compression NOT NULL,
  size BIGINT NOT NULL,
  contents BYTEA NOT NULL,

  md5sum TEXT NOT NULL,
  sha1sum TEXT NOT NULL,
  sha256sum TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- END INDEX TABLES.

-- BEGIN PACKAGE TABLES.
--
-- These tables represent the packages in the repository.

CREATE TYPE debian_repository_package_staging_status AS ENUM ('add', 'remove');

CREATE TABLE debian_repository_package (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  repository_id BIGINT NOT NULL REFERENCES debian_repository(id),
  architecture_id BIGINT NOT NULL REFERENCES debian_repository_architecture(id),
  component_id BIGINT NOT NULL REFERENCES debian_repository_component(id),

  -- If set, this is a _new_ change in the staging area. This package is either
  -- being added or removed.
  staging_status debian_repository_package_staging_status,

  -- For a list of available fields, see:
  -- 1. https://wiki.debian.org/DebianRepository/Format#A.22Packages.22_Indices
  -- 2. https://www.debian.org/doc/debian-policy/ch-controlfields.html#debian-binary-package-control-files-debian-control
  package TEXT NOT NULL,
  version TEXT NOT NULL,
  priority TEXT,
  section TEXT,
  installed_size BIGINT,
  maintainer TEXT NOT NULL,
  description TEXT NOT NULL,
  homepage TEXT,

  -- TODO: Add unique indexes. Maybe (package, version, arch) should be unique?
  -- Or pool filenames? Or hashes?

  -- Free-form { [key: string]: string } containing all control file fields.
  -- This encapsulates the presences of extra fields sometimes, like `License`
  -- or `Vendor`.
  paragraph JSONB NOT NULL,

  depends TEXT,
  recommends TEXT,
  conflicts TEXT,
  provides TEXT,
  replaces TEXT,

  filename TEXT NOT NULL,
  size BIGINT NOT NULL,
  md5sum TEXT NOT NULL,
  sha1sum TEXT NOT NULL,
  sha256sum TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- This is primarily used for generating Contents indices.
CREATE TABLE debian_repository_package_file (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  package_id BIGINT NOT NULL REFERENCES debian_repository_package(id),

  filepath TEXT NOT NULL,

  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- END PACKAGE TABLES.

COMMIT;
