# Workflows that run on tags. These are primarily CD tasks for cutting
# production release builds.
name: Tag

on:
  push:
    tags: ["v*"]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.json"
      - "**/*.lock"
      - "**/.gitignore"
      - "**/LICENSE"
  workflow_dispatch:
    inputs:
      releaseName:
        description: "Release name"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  RELEASE_NAME: ${{ inputs.releaseName || github.ref_name }}

jobs:
  macos-notarize:
    name: Build and notarize Attune CLI macOS binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install macOS dependencies
        run: brew install gpgme

      - name: Install Rust
        run: rustup show

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2.8.0
        with:
          cache-workspace-crates: true
          cache-all-crates: true

      - name: Build macOS binary
        run: cargo build --bin attune --release

      - name: Import signing certificate
        env:
          APPLE_SIGNING_CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo -n "$APPLE_SIGNING_CERTIFICATE" | base64 --decode -o $RUNNER_TEMP/certificate.p12
          security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $RUNNER_TEMP/build.keychain
          security default-keychain -s $RUNNER_TEMP/build.keychain
          security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $RUNNER_TEMP/build.keychain
          security import $RUNNER_TEMP/certificate.p12 -k $RUNNER_TEMP/build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_CERTIFICATE_PASSWORD" $RUNNER_TEMP/build.keychain
          rm $RUNNER_TEMP/certificate.p12

      # We include the com.apple.security.cs.disable-library-validation
      # entitlement because attune dynamically loads libgpgme from Homebrew
      # (/opt/homebrew/...). Without this, Hardened Runtime's library validation
      # would reject the dylib since it's signed with a different Team ID. This
      # entitlement allows the app to load third-party signed libraries while
      # still enabling Hardened Runtime.
      - name: Sign binary
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          codesign --sign "$APPLE_DEVELOPER_ID" \
                   --timestamp \
                   --options=runtime \
                   --entitlements ./macos/entitlements.plist \
                   --force \
                   target/release/attune

      - name: Store notarization credentials
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          xcrun notarytool store-credentials "notarytool-password" \
                  --apple-id "$APPLE_ID" \
                  --team-id "$APPLE_DEVELOPER_ID" \
                  --password "$APPLE_APP_SPECIFIC_PASSWORD"

      - name: Create ZIP for notarization
        run: zip $RUNNER_TEMP/attune-macos.zip target/release/attune

      # Can add --wait to tell notarytool to exit only after the Notary service finishes processing the submission.
      - name: Submit for notarization
        run: |
          xcrun notarytool submit $RUNNER_TEMP/attune-macos.zip \
                  --keychain-profile "notarytool-password"

      # TODO: Add xcrun stapler step in the future so the binary can be validated without internet access.

      - name: Upload notarized binary
        uses: actions/upload-artifact@v4
        with:
          name: attune-macos-notarized
          path: target/release/attune

  publish:
    name: Production build and publish draft release
    runs-on: ubuntu-latest
    needs: macos-notarize
    env:
      ATTUNE_DATABASE_URL: postgresql://attune:attune@localhost:5432/attune
      # These values are from Minio, which is used in integration tests.
      # We need these environment variables and services to run the tests.
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: attuneminio
      AWS_SECRET_ACCESS_KEY: attuneminio
      AWS_ENDPOINT_URL_S3: http://localhost:9000
    services:
      postgres:
        image: postgres:17.4-bookworm
        env:
          POSTGRES_USER: attune
          POSTGRES_PASSWORD: attune
          POSTGRES_DB: attune
        ports:
          - "5432:5432"
      minio:
        image: ghcr.io/attunehq/minio:latest@sha256:d816cb5feed54cbf1789b5cf0ed93fc7cf99809bb1018cf6781275bdc6e5e7ef
        env:
          MINIO_ROOT_USER: attuneminio
          MINIO_ROOT_PASSWORD: attuneminio
          MINIO_DOMAIN: localhost
        ports:
          - "9000:9000"
        volumes:
          - "/tmp/minio-data:/data"
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      # Build and test binaries.
      - name: Install Rust
        run: rustup show

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpg-error-dev libgpgme-dev pkg-config

      - name: Create MinIO bucket
        run: mkdir -p /tmp/minio-data/attune-dev-0

      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2.8.0
        with:
          cache-workspace-crates: true
          cache-all-crates: true
          cache-on-failure: true

      - name: Migrate and check database
        working-directory: ./docker/migrate
        run: |
          npm install
          npm run build
          npm run fmt:check
          npm run migrate
          npm run diff

      - name: Build binaries
        run: cargo build --workspace --all-targets --all-features --release

      - name: Run tests
        run: cargo test --workspace --all-targets --all-features --release

      # Download notarized macOS binary
      - name: Download notarized macOS binary
        uses: actions/download-artifact@v4
        with:
          name: attune-macos-notarized
          path: /tmp/macos-binary

      # Publish GitHub pre-release.
      - name: Copy and rename release assets
        run: |
          mkdir -p /tmp/release
          cp target/release/attune /tmp/release/attune-${{ env.RELEASE_NAME }}_${{ runner.os }}-${{ runner.arch }}
          cp /tmp/macos-binary/attune /tmp/release/attune-${{ env.RELEASE_NAME }}_macOS-ARM64
          cp target/release/attune-server /tmp/release/attune-server-${{ env.RELEASE_NAME }}_${{ runner.os }}-${{ runner.arch }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          preserve_order: true
          generate_release_notes: true
          files: /tmp/release/*

      # Publish Docker image.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # TODO: Parallelize these Docker builds?

      - name: Extract metadata (tags, labels) for Docker
        id: docker-metadata-attune
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/attune
      - name: Build and push control plane image
        id: docker-build-and-push-attune
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/attune/Dockerfile
          push: true
          tags: ${{ steps.docker-metadata-attune.outputs.tags }}
          labels: ${{ steps.docker-metadata-attune.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/attune
          subject-digest: ${{ steps.docker-build-and-push-attune.outputs.digest }}
          push-to-registry: true

      - name: Extract metadata (tags, labels) for Docker
        id: docker-metadata-migrate
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/migrate
      - name: Build and push migration image
        id: docker-build-and-push-migrate
        uses: docker/build-push-action@v6
        with:
          context: ./docker/migrate
          push: true
          tags: ${{ steps.docker-metadata-migrate.outputs.tags }}
          labels: ${{ steps.docker-metadata-migrate.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/migrate
          subject-digest: ${{ steps.docker-build-and-push-migrate.outputs.digest }}
          push-to-registry: true

      - name: Extract metadata (tags, labels) for Docker
        id: docker-metadata-minio
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/minio
      - name: Build and push development Minio image
        id: docker-build-and-push-minio
        uses: docker/build-push-action@v6
        with:
          context: ./docker/minio
          push: true
          tags: ${{ steps.docker-metadata-minio.outputs.tags }}
          labels: ${{ steps.docker-metadata-minio.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/minio
          subject-digest: ${{ steps.docker-build-and-push-minio.outputs.digest }}
          push-to-registry: true

      - name: Extract metadata (tags, labels) for Docker
        id: docker-metadata-testinstall
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/testinstall
      - name: Build and push development test installation image
        id: docker-build-and-push-testinstall
        uses: docker/build-push-action@v6
        with:
          context: ./docker/testinstall
          push: true
          tags: ${{ steps.docker-metadata-testinstall.outputs.tags }}
          labels: ${{ steps.docker-metadata-testinstall.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/testinstall
          subject-digest: ${{ steps.docker-build-and-push-testinstall.outputs.digest }}
          push-to-registry: true
