# Workflows that run on pull requests. These are primarily CI checks for
# linting, formatting, testing, etc.
name: PR

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.json"
      - "**/*.lock"
      - "**/.gitignore"
      - "**/LICENSE"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # rust:
  #   name: Build, check, and test Rust
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Since these installation steps don't require checkout, technically we
  #     # could do them ahead of time and just cache the resulting image.
  #     # Unfortunately, this is actually sometimes _slower_ in GHA because then
  #     # you're using a custom image instead of a runner image that's always hot
  #     # on the node.
  #     #
  #     # If you decide to make this change, make sure to benchmark whether it's
  #     # actually faster.
  #     - name: Install Rust
  #       run: rustup show

  #     # These should match `../docker/attune/Dockerfile`.
  #     - name: Install system dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgpg-error-dev libgpgme-dev pkg-config

  #     - uses: actions/checkout@v4

  #     - name: Remove empty EE crate
  #       run: rm -r ./packages/attune-ee

  #     - name: Cache cargo
  #       uses: Swatinem/rust-cache@v2.8.0
  #       with:
  #         cache-workspace-crates: true
  #         cache-all-crates: true

  #     - name: Check format
  #       run: cargo fmt --all --check

  #     # Note that we don't have a separate `cargo sqlx prepare --workspace
  #     # --check` step because missing query cache will cause this build to fail
  #     # anyway, and installing the `cargo sqlx` tool takes longer than waiting
  #     # for the build to fail due to missing migrations.
  #     - name: Check build
  #       run: cargo check --workspace --all-targets --all-features

  #     - name: Check clippy
  #       run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  #     - name: Run tests
  #       run: cargo test --workspace --all-targets --all-features -- --skip smoke

  #     - name: Run full build
  #       run: cargo build --workspace --all-targets --all-features

  # db:
  #   name: Check database migrations
  #   runs-on: ubuntu-latest
  #   env:
  #     ATTUNE_DATABASE_URL: postgresql://attune:attune@localhost:5432/attune
  #   services:
  #     postgres:
  #       image: postgres:17.4-bookworm
  #       env:
  #         POSTGRES_USER: attune
  #         POSTGRES_PASSWORD: attune
  #         POSTGRES_DB: attune
  #       ports:
  #         - "5432:5432"
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Prisma
  #       run: npm install
  #       working-directory: ./docker/migrate

  #     - name: Check Prisma formatting
  #       run: npm run fmt:check
  #       working-directory: ./docker/migrate

  #     - name: Run production migrations
  #       run: npm run migrate
  #       working-directory: ./docker/migrate

  #     - name: Check for schema drift
  #       run: npm run diff
  #       working-directory: ./docker/migrate

  #     # TODO: Is there a way to test the RDS migration script?
  #     - name: Build custom migration scripts
  #       run: npm run build
  #       working-directory: ./docker/migrate

  dev:
    name: Set up Attune locally and run smoke tests
    runs-on: ubuntu-latest
    # needs: db
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: rustup show

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Set up environment
        run: cp .env.example .env

      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          timeout-minutes: 30

      - name: Start services
        run: |
          docker compose up -d
          echo "Services started, waiting for health checks..."
          
          # Show initial status
          echo "Initial service status:"
          docker compose ps
          
          # Wait for services to be healthy with debugging
          timeout 300 bash -c '
            attempt=1
            until docker compose ps | grep -q "healthy"; do
              echo "Attempt $attempt: Waiting for services to be healthy..."
              echo "Current service status:"
              docker compose ps
              echo "Checking for 'healthy' in output:"
              docker compose ps | grep "healthy" || echo "No healthy services found yet"
              echo "---"
              sleep 5
              attempt=$((attempt + 1))
            done
          '
          
          echo "Health check complete! Final status:"
          docker compose ps

      - name: Build CLI
        run: cargo build --release --bin attune

      - name: Run smoke tests
        env:
          ATTUNE_CLI_PATH: ${{ github.workspace }}/target/release/attune
          ATTUNE_API_ENDPOINT: http://localhost:3000
          ATTUNE_API_TOKEN: INSECURE_TEST_TOKEN
        run: cargo test --test smoke

      - name: Stop services
        if: (true)
        run: docker compose down
