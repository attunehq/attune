# Workflows that run on pull requests. These are primarily CI checks for
# linting, formatting, testing, etc.
name: PR

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  rust:
    name: Build, check, and test Rust
    runs-on: ubuntu-latest
    env:
      ATTUNE_DATABASE_URL: postgresql://attune:attune@localhost:5432/attune
      # These values are from Minio, which is used in integration tests.
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: attuneminio
      AWS_SECRET_ACCESS_KEY: attuneminio
      AWS_ENDPOINT_URL_S3: http://localhost:9000
    services:
      postgres:
        image: postgres:17.4-bookworm
        env:
          POSTGRES_USER: attune
          POSTGRES_PASSWORD: attune
          POSTGRES_DB: attune
        ports:
          - "5432:5432"
      minio:
        image: ghcr.io/attunehq/minio:latest@sha256:d816cb5feed54cbf1789b5cf0ed93fc7cf99809bb1018cf6781275bdc6e5e7ef
        env:
          MINIO_ROOT_USER: attuneminio
          MINIO_ROOT_PASSWORD: attuneminio
          MINIO_DOMAIN: localhost
        ports:
          - "9000:9000"
        volumes:
          - "/tmp/minio-data:/data"
    steps:
      # Since these installation steps don't require checkout, technically we
      # could do them ahead of time and just cache the resulting image.
      # Unfortunately, this is actually sometimes _slower_ in GHA because then
      # you're using a custom image instead of a runner image that's always hot
      # on the node.
      #
      # If you decide to make this change, make sure to benchmark whether it's
      # actually faster.
      - name: Install Rust
        run: |
          rustup toolchain install nightly
          rustup component add --toolchain nightly rustfmt
          rustup show

      # These should match `../docker/attune/Dockerfile`.
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpg-error-dev libgpgme-dev pkg-config

      - name: Create MinIO bucket
        run: mkdir -p /tmp/minio-data/attune-dev-0

      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2.8.0
        with:
          cache-workspace-crates: true
          cache-all-crates: true
          cache-on-failure: true

      - name: Check format
        run: cargo +nightly fmt --all --check

      - name: Migrate and check database
        working-directory: ./docker/migrate
        run: |
          npm install
          # TODO: Figure out how to test the RDS migration script.
          npm run build
          npm run fmt:check
          npm run migrate
          npm run diff

      # We could use `cargo check` and `cargo sqlx prepare --check` here, but
      # it's not actually fast enough in CI that it provides a meaningfully
      # faster developer experience (instead of waiting 3 minutes, you just wait
      # 2 minutes), and none of the work can be reused[^1]. So we instead opt to
      # minimize total CI time by just running the full build first, since tests
      # and checks can reuse the build.
      #
      # [^1]: https://github.com/rust-lang/cargo/issues/3501
      - name: Run full build
        run: cargo build --workspace --all-targets --all-features

      - name: Check clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --workspace --all-targets --all-features

  e2e:
    name: End-to-end test
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        run: rustup show

      # These should match `../docker/attune/Dockerfile`.
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpg-error-dev libgpgme-dev pkg-config

      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2.8.0
        with:
          cache-workspace-crates: true
          cache-all-crates: true
          cache-on-failure: true

      # This integration test is also functionally an end-to-end test for our
      # Docker images. Note that we perform a build because this particular test
      # requires the CLI binary built in release mode.
      - name: Run tests
        run: |
          cp .env.example .env
          source .env
          cargo build --package attune --bin attune --all-features --release
          E2E_DOCKER=true RUST_LOG=it=trace cargo test --package attune --test it --all-features --release -- --nocapture
