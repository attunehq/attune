# Workflows that run on pushes to the main branch. These are primarily CD tasks
# for cutting development release builds.
name: Main

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.json"
      - "**/*.lock"
      - "**/.gitignore"
      - "**/LICENSE"
  merge_group:
    types: [checks_requested]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  cd:
    name: Development build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      ATTUNE_DATABASE_URL: postgresql://attune:attune@localhost:5432/attune
      DATABASE_URL: postgresql://attune:attune@localhost:5432/attune
    services:
      postgres:
        image: postgres:17.4-bookworm
        env:
          POSTGRES_USER: attune
          POSTGRES_PASSWORD: attune
          POSTGRES_DB: attune
        ports:
          - "5432:5432"
    steps:
      # Since these installation steps don't require checkout, technically we
      # could do them ahead of time and just cache the resulting image.
      # Unfortunately, this is actually sometimes _slower_ in GHA because then
      # you're using a custom image instead of a runner image that's always hot
      # on the node.
      #
      # If you decide to make this change, make sure to benchmark whether it's
      # actually faster.
      - name: Install Rust
        run: rustup show

      # These should match `../docker/attune/Dockerfile`.
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpg-error-dev libgpgme-dev pkg-config

      - uses: actions/checkout@v4

      - name: Remove empty EE crate
        run: rm -r ./packages/attune-ee

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2.8.0
        with:
          cache-workspace-crates: true
          cache-all-crates: true

      - name: Migrate database
        working-directory: ./docker/migrate
        run: |
          npm install
          npm run migrate
          npm run diff

      - name: Run tests
        run: cargo test --workspace --all-targets --all-features --release

      # Build binaries.
      - name: Build binaries
        run: cargo build --workspace --all-targets --all-features --release

      # Build and push Docker image.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: docker-build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/attune/Dockerfile
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.docker-build-and-push.outputs.digest }}
          push-to-registry: true

      # Upload binaries.
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: attune-${{ runner.os }}_${{ runner.arch }}_${{ github.sha }}
          path: |
            target/release/attune
            target/release/attune-server
          if-no-files-found: error
