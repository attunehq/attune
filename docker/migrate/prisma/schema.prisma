generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("ATTUNE_DATABASE_URL")
}

// A tenant of the Attune platform. This is generally an organization account.
model AttuneTenant {
  // The tenant at ID 1 is a special "local" tenant, which is automatically
  // initialized on control plane start.
  id BigInt @id @default(autoincrement())

  // This is just for human readability purposes.
  display_name String

  // The managed cloud subdomain for this tenant (i.e. their repositories that
  // don't use custom domains will be hosted at `*.<subdomain>.attunehq.com`).
  //
  // This value is empty for the local tenant at ID 1.
  subdomain String @unique

  repositories DebianRepository[]
  packages     DebianRepositoryPackage[]
  api_tokens   AttuneTenantAPIToken[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  @@map("attune_tenant")
}

// An API token provisioned for an Attune tenant.
model AttuneTenantAPIToken {
  id        BigInt       @id @default(autoincrement())
  tenant_id BigInt
  tenant    AttuneTenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // This is just for human readability purposes.
  name  String
  // This is the SHA-256 hash of the API token. Salting this hash is
  // unnecessary, since we control the generation of API tokens, and we choose
  // to generate long, random, and unique tokens (that are therefore resistant
  // to rainbow table attacks).
  token Bytes  @unique

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("attune_tenant_api_token")
}

// A Debian package repository.
//
// For more details, see:
// - https://wiki.debian.org/DebianRepository
// - https://wiki.debian.org/DebianRepository/Format
model DebianRepository {
  id        BigInt       @id @default(autoincrement())
  tenant_id BigInt
  tenant    AttuneTenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // The name uniquely identifies a repository within a tenant.
  name String

  // For managed cloud deployments, this is the URI at which the data plane will
  // serve the repository. For self-hosted deployments, this value is null.
  //
  // For now, this value is _always_ provisioned manually during onboarding, and
  // is not self-serviceable or editable. Later, we may implement self-service
  // custom subdomains.
  uri String? @unique

  // Every release in a repository is stored in the same S3 folder.
  s3_bucket String
  s3_prefix String

  releases DebianRepositoryRelease[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Each repository's name must be unique within a tenant.
  @@unique([tenant_id, name])
  @@map("debian_repository")
}

// A package repository contains many releases. Each release contains packages
// prepared for a specific version of Debian.
//
// For more details, see:
// - https://wiki.debian.org/DebianRepository/Format#A.22Release.22_files
model DebianRepositoryRelease {
  id            BigInt           @id @default(autoincrement())
  repository_id BigInt
  repository    DebianRepository @relation(fields: [repository_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  // Releases have a primary name, called the "distribution". This defines their
  // URL path under `/dists` within the repository.
  //
  // Generally, this should either be the `suite` (e.g. `stable`) or `codename`
  // (e.g. `bullseye`) of a release.
  //
  // See https://wiki.debian.org/DebianRepository/Format#Overview:~:text=The%20distribution%20part,this%20enforced%20anyhow%3F
  distribution String

  // Metadata for generating the Release file.
  description String?
  origin      String?
  label       String?
  version     String?
  // Technically, one or the other of `suite` or `codename` must be set. We
  // require both for simplicity.
  suite       String
  codename    String

  // The contents of the `Release` file.
  contents    String
  clearsigned String?
  detached    String?

  // Each release's contents are divided into multiple components.
  components DebianRepositoryComponent[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Each repository can only have one release with a given distribution.
  @@unique([repository_id, distribution])
  @@map("debian_repository_release")
}

// Each release is divided into components, each of which has its own
// architecture-specific indexes.
model DebianRepositoryComponent {
  id         BigInt                  @id @default(autoincrement())
  release_id BigInt
  release    DebianRepositoryRelease @relation(fields: [release_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  name String

  packages         DebianRepositoryComponentPackage[]
  packages_indexes DebianRepositoryPackagesIndex[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Each release can only have one component with a given name.
  @@unique([release_id, name])
  @@map("debian_repository_component")
}

// A join table between components and packages.
model DebianRepositoryComponentPackage {
  component_id BigInt
  component    DebianRepositoryComponent @relation(fields: [component_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  package_id   BigInt
  package      DebianRepositoryPackage   @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  // Each component has its own "pool" of packages, so a package may have
  // multiple pool filenames if it is uploaded to multiple components.
  filename String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  @@id([component_id, package_id])
  @@map("debian_repository_component_package")
}

// Each component contains individual Debian packages.
model DebianRepositoryPackage {
  id           BigInt                             @id @default(autoincrement())
  // Note that this representation permits nonsensical constructions (e.g. a
  // package being a part of components in different repositories, or in a
  // repository different from the package's repository). The application layer
  // is responsible for ensuring that this does not occur.
  components   DebianRepositoryComponentPackage[]
  architecture DebianRepositoryArchitecture

  // Packages also have tenants that own them, because packages can stand alone
  // as a top-level entity for a tenant. Equivalently: a tenant might have
  // packages that are not in any repository, so we need to mark which packages
  // are owned directly by a tenant.
  tenant_id BigInt
  tenant    AttuneTenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // The S3 bucket in which the package file object is stored. The path in this
  // bucket is fixed to `/packages/<sha256sum>`.
  s3_bucket String

  // For a list of available fields, see:
  // 1. https://wiki.debian.org/DebianRepository/Format#A.22Packages.22_Indices
  // 2. https://www.debian.org/doc/debian-policy/ch-controlfields.html#debian-binary-package-control-files-debian-control
  package        String
  version        String
  priority       String?
  section        String?
  installed_size BigInt?
  maintainer     String
  description    String
  homepage       String?

  // Free-form { [key: string]: string } containing all control file fields.
  // This encapsulates the presences of extra fields sometimes, like `License`
  // or `Vendor`.
  paragraph Json

  depends    String?
  recommends String?
  conflicts  String?
  provides   String?
  replaces   String?

  size      BigInt

  // These hashes are all hex-encoded.
  md5sum    String
  sha1sum   String
  sha256sum String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Packages are uniquely identified by their (name, version, arch). See:
  // https://wiki.debian.org/DebianRepository/Format#Duplicate_Packages
  @@unique([tenant_id, package, version, architecture])
  // This index is a sanity check, since (package, version, architecture)
  // uniqueness should be sufficient to ensure content uniqueness (i.e. it is
  // impossible to upload two packages with the sha256sum that do not also have
  // the same (package, version, architecture), since the metadata fields are
  // one of the things hashed to produced the checksum and changing the metadata
  // would therefore change the checksum).
  @@unique([tenant_id, sha256sum])
  @@map("debian_repository_package")
}

// For a list of architectures, see:
// - https://wiki.debian.org/SupportedArchitectures
enum DebianRepositoryArchitecture {
  amd64
  arm64
  armel
  armhf
  i386
  ppc64el
  riscv64
  s390x
  alpha
  arm
  avr32
  hppa
  hurd_i386      @map("hurd-i386")
  hurd_amd64     @map("hurd-amd64")
  ia64
  kfreebsd_amd64 @map("kfreebsd-amd64")
  kfreebsd_i386  @map("kfreebsd-i386")
  loong64
  m32
  m68k
  mips
  mipsel
  mips64el
  netbsd_i386    @map("netbsd-i386")
  netbsd_alpha   @map("netbsd-alpha")
  or1k
  powerpc
  powerpcspe
  ppc64
  s390
  sparc
  sparc64
  sh4
  x32

  @@map("debian_repository_architecture")
}

// Different types of compression supported by Debian repository indexes. Each
// instance of an index file (i.e. with the same contents, but a different
// compression scheme) is saved in the database as a separate index, because we
// need to know its checksums to generate a release file.
//
// For more details, see:
// - https://wiki.debian.org/DebianRepository/Format#Compression_of_indices
enum DebianRepositoryIndexCompression {
  xz
  gz
  bz2
  lzma

  @@map("debian_repository_index_compression")
}

// A Packages index file.
//
// For more details, see:
// - https://wiki.debian.org/DebianRepository/Format#A.22Packages.22_Indices
model DebianRepositoryPackagesIndex {
  id           BigInt                       @id @default(autoincrement())
  component_id BigInt
  component    DebianRepositoryComponent    @relation(fields: [component_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  architecture DebianRepositoryArchitecture

  compression DebianRepositoryIndexCompression?
  size        BigInt
  contents    Bytes

  // These hashes are all hex-encoded.
  //
  // TODO: Should we store these as BYTES instead, since we sometimes use their
  // base64-encoded representation with AWS S3 headers?
  md5sum      String
  sha1sum     String
  sha256sum   String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Packages indexes are uniquely identified by (component, arch).
  @@unique([component_id, architecture])
  @@map("debian_repository_index_packages")
}
